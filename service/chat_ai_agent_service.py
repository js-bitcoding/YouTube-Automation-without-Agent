from fastapi import APIRouter, Depends, HTTPException
from sqlalchemy.orm import Session
from langchain.agents import initialize_agent, AgentType
from langchain.tools import Tool
from langchain.memory import ConversationBufferMemory
from langchain_community.llms import Ollama
from database.models import Chat, Group, Document, YouTubeVideo
from database.db_connection import get_db
from fastapi import APIRouter, Depends, HTTPException

# Initialize the Ollama LLM
llm = Ollama(model="llama3.2:1b")

# Setup agent memory
memory = ConversationBufferMemory(memory_key="chat_history", return_messages=True)

# Define the tools that will be used by the agent
def fetch_group_data(group_ids: list, db: Session):
    """
    Fetches relevant data from Group, Document, and YouTubeVideo based on group_ids.
    """
    group_data = []
    for group_id in group_ids:
        group = db.query(Group).filter(Group.id == group_id).first()

        if group:
            # Check if the group has related documents or videos
            if group.documents:
                document = db.query(Document).filter(Document.group_id == group_id).first()
                if document:
                    group_data.append(f"Document Title: {document.filename}\nContent: {document.content}\n")
            elif group.videos:
                video = db.query(YouTubeVideo).filter(YouTubeVideo.group_id == group_id).first()
                if video:
                    group_data.append(f"Video URL: {video.url}\nTranscript: {video.transcript}\n")

    return "\n".join(group_data)

# Define the tool for the agent
def generate_response_from_prompt_and_data(group_data: str, user_prompt: str):
    """
    This tool takes the group data (either document content or video transcript) and the user prompt,
    and returns a response generated by the LLM.
    """
    prompt = f"Here is some content:\n{group_data}\n\nNow, answer the following prompt:\n{user_prompt}"
    response = llm(prompt)
    return response

# Agent setup with the tools and memory
title_tool = Tool(
    name="ContentBasedAgent",
    func=generate_response_from_prompt_and_data,
    description="Generates a response based on content from documents and YouTube videos based on the group IDs provided by the user."
)

agent = initialize_agent(
    tools=[title_tool],
    llm=llm,
    agent=AgentType.OPENAI_FUNCTIONS,
    verbose=True,
    memory=memory,
    handle_parsing_errors=True
)